import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, f1_score, classification_report, confusion_matrix
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, SimpleRNN, Flatten, InputLayer

# Load the dataset
df = pd.read_csv("/content/diabetes_augmented.csv")

# Data Preprocessing
X = df.drop('Outcome', axis=1).values
y = df['Outcome'].values

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Reshape input for RNN (required for RNN input format)
X_train_scaled = np.expand_dims(X_train_scaled, axis=2)
X_test_scaled = np.expand_dims(X_test_scaled, axis=2)

# Build the RNN with MLP Model
rnn_mlp_model = Sequential()

# RNN Layer
rnn_mlp_model.add(SimpleRNN(64, activation='relu', input_shape=(X_train_scaled.shape[1], 1)))
rnn_mlp_model.add(Dropout(0.5))  # Regularization

# MLP Layers
rnn_mlp_model.add(Dense(32, activation='relu'))
rnn_mlp_model.add(Dropout(0.5))  # Dropout for regularization
rnn_mlp_model.add(Dense(16, activation='relu'))
rnn_mlp_model.add(Dense(1, activation='sigmoid'))

# Compile the model
rnn_mlp_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
rnn_mlp_history = rnn_mlp_model.fit(X_train_scaled, y_train, epochs=400, batch_size=32, validation_data=(X_test_scaled, y_test))

# Predictions and Evaluation
y_pred_rnn_mlp = (rnn_mlp_model.predict(X_test_scaled) > 0.5).astype("int32")

# Confusion Matrix and Classification Report
print("\nConfusion Matrix (RNN + MLP):")
print(confusion_matrix(y_test, y_pred_rnn_mlp))
print("\nClassification Report (RNN + MLP):")
print(classification_report(y_test, y_pred_rnn_mlp))

# Accuracy for RNN with MLP
accuracy_rnn_mlp = accuracy_score(y_test, y_pred_rnn_mlp)
print("RNN + MLP Test Accuracy:", accuracy_rnn_mlp)

# Plotting RNN with MLP training history
import matplotlib.pyplot as plt

plt.plot(rnn_mlp_history.history['accuracy'], label='Training Accuracy')
plt.plot(rnn_mlp_history.history['val_accuracy'], label='Validation Accuracy')
plt.title('RNN + MLP Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Plotting Loss History
plt.plot(rnn_mlp_history.history['loss'], label='Training Loss')
plt.plot(rnn_mlp_history.history['val_loss'], label='Validation Loss')
plt.title('RNN + MLP Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()
